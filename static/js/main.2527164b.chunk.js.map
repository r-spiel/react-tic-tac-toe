{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","id","value","Board","squareList","squares","concat","map","square","generateSquareComponents","generateSquares","currentId","row","push","col","App","useState","setSquares","player","setPlayer","winner","setWinner","checkForWinner","flatArray","forEach","combo","sqauresToPlay","updatedSquare","updatedBoard","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAuBeA,G,kBAlBA,SAACC,GAIhB,OAAO,wBACLC,UAAU,SAEVC,QANoB,WAClBF,EAAMG,gBAAgBH,EAAMI,KAEzB,SAIJJ,EAAMK,OAFFL,EAAMI,MC2BEE,EApBD,SAAC,GAAkC,IACzCC,EAbyB,SAACC,EAASL,GAAqB,IAAD,EAE7D,OADkB,MAAGM,OAAH,oBAAaD,IACdE,KAAI,SAACC,GACpB,OAAO,cAAC,EAAD,CAELP,GAAIO,EAAOP,GACXC,MAAOM,EAAON,MACdF,gBAAiBA,GAHZQ,EAAOP,OASGQ,CAD2B,EAA/BJ,QAA+B,EAAtBL,iBAGxB,OAAO,qBAAKF,UAAU,OAAf,SACJM,KCdCM,EAAkB,WAKtB,IAJA,IAAML,EAAU,GAEZM,EAAY,EAEPC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CACnCP,EAAQQ,KAAK,IACb,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAChCT,EAAQO,GAAKC,KAAK,CAChBZ,GAAIU,EACJT,MAAO,KAETS,GAAa,EAIjB,OAAON,GAiFMU,EA9EH,WAAM,MAIcC,mBAASN,KAJvB,mBAITL,EAJS,KAIAY,EAJA,OAKYD,oBAAS,GALrB,mBAKTE,EALS,KAKDC,EALC,OAMYH,mBAAS,IANrB,mBAMTI,EANS,KAMDC,EANC,KAahB,IAeMC,EAAiB,WAAO,IAAD,EAE3B,GAAe,KAAXF,EAAJ,CAGA,IAAMG,GAAY,MAAGjB,OAAH,oBAAaD,IAEV,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAG7FmB,SAAQ,SAACC,GACc,KAA9BF,EAAUE,EAAM,IAAIvB,OAAgBqB,EAAUE,EAAM,IAAIvB,QAAUqB,EAAUE,EAAM,IAAIvB,OAASqB,EAAUE,EAAM,IAAIvB,QAAUqB,EAAUE,EAAM,IAAIvB,OACnJmB,EAAUE,EAAUE,EAAM,IAAIvB,UAMlC,IAAIwB,EAAgB,EACpBH,EAAUC,SAAQ,SAAChB,GACI,KAAjBA,EAAON,QACTwB,GAAiB,MAIC,IAAlBA,GACFL,EAAU,qBAUd,OACE,sBAAKvB,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,mDACA,4CAAesB,KACf,wBAAQrB,QAXI,WAChBkB,EAAWP,GACXS,GAAU,GACVE,EAAU,KAQN,4BAEF,+BACE,cAAC,EAAD,CAAOhB,QAASA,EAASL,gBA3DP,SAAC2B,GAEvB,IADA,IAAIC,EAAe,GACVhB,EAAM,EAAGA,EAAMP,EAAQwB,OAAQjB,IAAO,CAC7C,IAAK,IAAIE,EAAM,EAAGA,EAAMT,EAAQwB,OAAQf,IAClCa,IAAkBtB,EAAQO,GAAKE,GAAKb,IAAkC,KAA5BI,EAAQO,GAAKE,GAAKZ,QAC9DG,EAAQO,GAAKE,GAAb,OATNK,GAAWD,GACJA,EAhCM,IACA,MA0CXU,EAAaf,KAAKR,EAAQO,IAE5BK,EAAWW,GACXN,KAgD+DF,OAAQA,UCvFvDU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2527164b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  const clickSquare = () => {\n    props.onClickCallback(props.id);\n};\nreturn <button\n  className=\"square\"\n  key={props.id}\n  onClick={clickSquare}>\n  {props.value}\n</button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  const flatArray = [].concat(...squares);\n  return flatArray.map((square) => {\n    return <Square\n      key={square.id}\n      id={square.id}\n      value={square.value}\n      onClickCallback={onClickCallback}\n    />\n  });\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  // console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  // State starts off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [player, setPlayer] = useState(true);\n  const [winner, setWinner] = useState('');\n\n  function swapPlayer() {\n    setPlayer(!player);\n    return player;\n  };\n\n  const onClickCallback = (updatedSquare) => {\n    let updatedBoard = [];\n    for (let row = 0; row < squares.length; row++) {\n      for (let col = 0; col < squares.length; col++) {\n        if (updatedSquare === squares[row][col].id && squares[row][col].value === '') {\n          squares[row][col]['value'] = (swapPlayer() ? PLAYER_1 : PLAYER_2);\n        }\n      }\n      updatedBoard.push(squares[row]);\n    }\n    setSquares(updatedBoard);\n    checkForWinner();\n  };\n\n\n  const checkForWinner = () => {\n    // if the winner is already delcared, return (don't assign new winner)\n    if (winner !== '') return;\n    \n    // flatten the array of squares\n    const flatArray = [].concat(...squares);\n    // have a 2d array of combos to check\n    const winnerCombos = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]\n\n    // if any produce winner, set winner\n    winnerCombos.forEach((combo) => {\n      if (flatArray[combo[0]].value !== '' && flatArray[combo[0]].value === flatArray[combo[1]].value && flatArray[combo[1]].value === flatArray[combo[2]].value) {\n        setWinner(flatArray[combo[0]].value);\n        return;\n      };\n    })\n\n    // if there are no empty sqaures, then it's a tie, game is over\n    let sqauresToPlay = 0;\n    flatArray.forEach((square) => {\n      if (square.value === '') {\n        sqauresToPlay += 1\n      };\n    });\n\n    if (sqauresToPlay === 0) {\n      setWinner('TIED! GAME OVER');\n    };\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares);\n    setPlayer(true);\n    setWinner('');\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>Winner is {winner}</h2>\n        <button onClick={resetGame}> Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback} winner={winner} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}